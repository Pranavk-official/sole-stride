<section class="breadcrumb-option">
  <div class="container">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb breadcrumb-chevron p-3 bg-body-tertiary rounded-2">
        <li class="breadcrumb-item">
          <a class="link-body-emphasis" href="/admin">
            <svg class="bi" width="16" height="16">
              <use xlink:href="#house-door-fill"></use>
            </svg>
            <span class="visually-hidden">Dashboard</span>
          </a>
        </li>
        <li class="breadcrumb-item">
          <a class="link-body-emphasis fw-semibold text-decoration-none" href="/admin/products">Products</a>
        </li>

        <li class="breadcrumb-item active" aria-current="page">
          Edit Product - <%- product.product_name %>
        </li>
      </ol>
    </nav>
  </div>
</section>

<div class="container d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2"><%= locals.title ? locals.title : 'Dashboard' %></h1>
</div>

<section class="new-product container">
  <form id="editProductForm" action="/admin/products/edit-product/<%- product._id %>?" method="POST" enctype="multipart/form-data" class="container row m-3 justify-content-evenly border">
    <legend class="h2 fw-bold text-center m-3">
      Edit Product - <%- product.product_name %>
    </legend>
    <div class="d-flex">
      <div class="card col-md-4 pb-0">
        <fieldset class="card-body align-items-center">
          <legend>Edit Product Images</legend>
          <span class="m-2 text-success">file supports only: jpeg,jpg,png,webp</span>

          <div class="card-body">
            <div class="primary-img row">
              <label for="inputtext3" class="col-sm-2 col-md-12 col-form-label mb-2">Primary Image</label>
              <div class="d-flex align-items-center justify-content-evenly">
                <div class="card">  
                    <img src="/uploads/product-images/<%= product?.primary_image.name %>" id="img<%= product?.primary_image.name %>" class="card-img img-fluid" alt="" />
                  <div class="col mt-3">
                    <input type="hidden" class="form-control mb-2" value="<%= product?.primary_image._id %>" name="id_primary_img" />
                    <input type="file" class="form-control mb-2" accept=".jpeg,.png,.jpg,.webp,.svg" id="<%= product?.primary_image.name %>" onchange="previewImg(event)" name="primaryImage" />
                  </div>
                  <div class="card-footer">
                    <button onclick="deleteImage('<%- product?.primary_image.name %>', '<%- product._id %>')" type="button" class="w-100 btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>
                  </div>
                  <!-- <img src="/uploads/product-images/<%= product?.primary_image.name %>" class="border rounded card-img" id="img<%= product?.primary_image.name %>" alt="" style="width: 4rem" />
                  <div class="card-body">
                    <div class="col-sm-10 col-md-9">
                      <input type="hidden" class=1"form-control mb-2 prod-img" value="<%= product.primary_image._id %>" name="id_primary_img" />
                      <input type="file" class="form-control mb-2" id="<%= product.primary_image.name %>" accept=".jpg,.jpeg,.png,.webp,.svg" onchange="previewImg(event)" name="primaryImage" />
                    </div>
                    <div class="card-footer">
                      <button type="button" class="w-100 btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>
                    </div>
                  </div> -->
                </div>
              </div>
            </div>
            <div class="secondary-img row">
              <div class="d-flex align-items-center">
                <label for="inputtext3" class="col-form-label mb-2">Secondary Images</label>
              </div>
              <div class="row">
                <!-- <input type="file" id="image" class="form-control FilUploader" accept=".jpg,.jpeg,.png,.webp,.svg" name="images" class="mb-3" multiple required /> -->
                <% product.secondary_images.forEach(function(img,index) { %>
                <div class="col-auto card">
                  <!-- <pre><%- img %></pre> -->
                  <img src="/uploads/product-images/<%= img.name %>" class="card-img img-fluid" alt="" id="img<%= img.name %>" />
                  <div class="col mt-3">
                    <input type="file" class="form-control mb-2" accept=".jpeg,.png,.jpg,.webp,.svg" id="<%= img.name %>" onchange="previewImg(event)" name="images" />
                    <input type="hidden" class="form-control mb-2" value="<%= img._id %>" name="id_secondary_img" />
                  </div>
                  <div class="card-footer">
                    <button onclick="deleteImage('<%- img.name %>', '<%- product._id %>')" type="button" class="w-100 btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>
                  </div>
                </div>
                <% }); %>
              </div>

              <div class="d-flex align-items-center secondary-img jsutify-content-center"></div>
              <br />
            </div>
          </div>
        </fieldset>
      </div>
      <div class="card col-md-7">
        <fieldset class="card-body">
          <legend>Product Details</legend>
          <div class="form-group mb-3">
            <label for="product_name" class="form-label">Product Name</label>
            <input name="product_name" type="text" class="form-control" id="product_name" value="<%- product.product_name %>" />
            <small></small>
          </div>

          <div class="form-group mb-3">
            <label class="form-label" for="status">Status</label>
            <select class="form-select" name="status" id="status" aria-label="Default select example">
              <% if (product.isActive) { %>
              <option value="true">List</option>
              <option value="false">Unlist</option>
              <% } else { %>
              <option value="false">Unlist</option>
              <option value="true">List</option>
              <% } %>
            </select>
            <small></small>
          </div>
          <div class="form-group mb-3">
            <label for="category" class="form-label">Brand</label>
            <!-- <pre><%- product.brand %></pre> -->
            <select class="form-select text-capitalize" name="brand" required>
              <option value="<%- product.brand._id %>"><%- product.brand.name %></option>
              <% brands.forEach(function(brand) { %>
              <% if (brand.name !== product.brand.name) { %>
              <option class="text-capitalize" value="<%= brand._id %>">
                <%= brand.name %>
              </option>
              <% } %>
              <% }); %>
            </select>
          </div>
          <div class="form-group mb-3">
            <label for="category" class="form-label">Category</label>
            <select class="form-select text-capitalize" name="category" required>
              <option value="<%- product.category._id %>"><%- product.category.name %></option>
              <% categories.forEach(function(category) { %>
              <% if (category.name !== product.category.name) { %>
              <option class="text-capitalize" value="<%= category._id %>">
                <%= category.name %>
              </option>
              <% } %>
              <% }); %>
            </select>
          </div>
          <div class="form-group mb-3">
            <label for="description" class="form-label">Product Description</label>
            <textarea name="description" id="description" cols="30" rows="5" class="form-control"><%- product.description %></textarea>
            <small></small>
          </div>
          <div class="row">
            <div class="form-group mb-3 col">
              <label for="actualPrice" class="form-label">Actual Price</label>
              <input class="form-control" type="number" name="actualPrice" id="actualPrice" value="<%- product.actualPrice %>" />
              <small></small>
            </div>
            <div class="form-group mb-3 col">
              <label for="sellingPrice" class="form-label">Selling Price</label>
              <input class="form-control" type="number" name="sellingPrice" id="sellingPrice" value="<%- product.sellingPrice %>" />
              <small></small>
            </div>
          </div>
        </fieldset>
      </div>
    </div>
    <div class="d-flex justify-content-evenly m-4">
      <button type="submit" class="btn btn-primary">Submit</button>
      <button type="reset" class="btn btn-warning">Clear</button>
    </div>
  </form>
  <div style="display: none" class="crop-product card p-2 shadow" id="crp-container">
    <div class="d-flex flex-column">
      <img src="" id="images" style="object-fit: cover" />
      <button id="cropImageBtn" class="btn btn-primary mt-3">Crop Image</button>
    </div>
  </div>
</section>
<style>
  .crop-product {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 4;
    width: 30rem;
  }

  .error {
    color: rgb(255, 0, 0);
  }
</style>


<script defer>
  async function deleteImage(imageId, productId) {
    try {
      // Show a confirmation dialog
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      });

      if (result.isConfirmed) {
        // Send a request to the server to delete the image
        const response = await fetch(`/admin/products/delete-image?productId=${productId}&imageId=${imageId}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          // If the image was deleted successfully, show a success message
          Swal.fire(
            'Deleted!',
            'The image has been deleted.',
            'success'
          ).then(()=>{
            location.reload()
          });
          // Optionally, remove the image from the UI here
        } else {
          // If there was an error, show an error message
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
          });
        }
      }
    } catch (error) {
      console.error('Error deleting image:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Something went wrong!',
      });
    }
  }


  const productNameEl = document.querySelector("#product_name");
  const brandNameEl = document.querySelector("#brand_name");
  const sizeEl = document.querySelector("#size");
  const productColorEl = document.querySelector("#product_color");
  const productStockEl = document.querySelector("#product_stock");
  const categoryEl = document.querySelector("#category");
  const descriptionEl = document.querySelector("#description");
  const actualPriceEl = document.querySelector("#actualPrice");
  const sellingPriceEl = document.querySelector("#sellingPrice");
  const statusEl = document.querySelector("#status");
  const form = document.querySelector("#editProductForm");

  const isRequired = (value) => (value === "" ? false : true);

  const isNumber = (value) => {
    return !isNaN(parseFloat(value)) && isFinite(value);
  };

  // Function to check if a value is a valid color
  const isColor = (value) => {
    const colorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    return colorRegex.test(value);
  };


  const showError = (input, message) => {
    const formField = input.parentElement;
    formField.classList.remove("success", "is-valid");
    input.classList.remove("success", "is-valid");
    formField.classList.add("error", "is-invalid");
    input.classList.add("error", "is-invalid");
    const error = formField.querySelector("small");
    error.textContent = message;
  };

  const showSuccess = (input) => {
    const formField = input.parentElement;
    formField.classList.remove("error", "is-invalid");
    input.classList.remove("error", "is-invalid");
    formField.classList.add("success", "is-valid");
    input.classList.add("success", "is-valid");
    const error = formField.querySelector("small");
    error.textContent = "";
  };


  const checkProductName = () => {
    let valid = false;
    const productName = productNameEl.value.trim();

    if (!isRequired(productName)) {
      showError(productNameEl, "Product name cannot be blank.");
    } else if (!isBetween(productName.length, 3, 25)) {
      showError(productNameEl, "Product name must be between  3 and  25 characters.");
    } else {
      showSuccess(productNameEl);
      valid = true;
    }
    return valid;
  };
  const isBetween = (length, min, max) =>
    length < min || length > max ? false : true;

  const checkBrandName = () => {
    let valid = false;
    const brandName = brandNameEl.value.trim();

    if (!isRequired(brandName)) {
      showError(brandNameEl, "Brand name cannot be blank.");
    } else if (!isBetween(brandName.length, 3, 25)) {
      showError(brandNameEl, "Brand name must be between  3 and  25 characters.");
    } else {
      showSuccess(brandNameEl);
      valid = true;
    }
    return valid;
  };

  const checkSize = () => {
    let valid = false;
    const size = sizeEl.value.trim();

    if (!isRequired(size)) {
      showError(sizeEl, "Size cannot be blank.");
    } else if (!isNumber(size)) {
      showError(sizeEl, "Size must be a number.");
    } else {
      showSuccess(sizeEl);
      valid = true;
    }
    return valid;
  };

  const checkProductColor = () => {
    let valid = false;
    const productColor = productColorEl.value.trim();

    if (!isRequired(productColor)) {
      showError(productColorEl, "Color cannot be blank.");
    } else if (!isColor(productColor)) {
      showError(productColorEl, "Color is not valid.");
    } else {
      showSuccess(productColorEl);
      valid = true;
    }
    return valid;
  };

  const checkProductStock = () => {
    let valid = false;
    const productStock = productStockEl.value.trim();

    if (!isRequired(productStock)) {
      showError(productStockEl, "Stock cannot be blank.");
    } else if (!isNumber(productStock)) {
      showError(productStockEl, "Stock must be a number.");
    } else {
      showSuccess(productStockEl);
      valid = true;
    }
    return valid;
  };

  // const checkCategory = () => {
  //   let valid = false;
  //   const category = categoryEl.value.trim();

  //   if (!isRequired(category)) {
  //     showError(categoryEl, "Category cannot be blank.");
  //   } else {
  //     showSuccess(categoryEl);
  //     valid = true;
  //   }
  //   return valid;
  // };

  const checkDescription = () => {
    let valid = false;
    const description = descriptionEl.value.trim();

    if (!isRequired(description)) {
      showError(descriptionEl, "Description cannot be blank.");
    } else {
      showSuccess(descriptionEl);
      valid = true;
    }
    return valid;
  };

  const checkActualPrice = () => {
    let valid = false;
    const actualPrice = actualPriceEl.value.trim();

    if (!isRequired(actualPrice)) {
      showError(actualPriceEl, "Actual price cannot be blank.");
    } else if (!isNumber(actualPrice)) {
      showError(actualPriceEl, "Actual price must be a number.");
    } else {
      showSuccess(actualPriceEl);
      valid = true;
    }
    return valid;
  };

  const checkSellingPrice = () => {
    let valid = false;
    const sellingPrice = sellingPriceEl.value.trim();

    if (!isRequired(sellingPrice)) {
      showError(sellingPriceEl, "Selling price cannot be blank.");
    } else if (!isNumber(sellingPrice)) {
      showError(sellingPriceEl, "Selling price must be a number.");
    } else {
      showSuccess(sellingPriceEl);
      valid = true;
    }
    return valid;
  };

  const checkStatus = () => {
    let valid = false;
    const status = statusEl.value.trim();

    if (!isRequired(status)) {
      showError(statusEl, "Status cannot be blank.");
    } else {
      showSuccess(statusEl);
      valid = true;
    }
    return valid;
  };

  const debounce = (fn, delay = 50) => {
    let timeoutId;
    return (...args) => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
      timeoutId = setTimeout(() => {
        fn.apply(null, args);
      }, delay);
    };
  };

  form.addEventListener("submit", function(e) {
    e.preventDefault();

    let isProductNameValid = checkProductName(),
      isDescriptionValid = checkDescription(),
      isActualPriceValid = checkActualPrice(),
      isSellingPriceValid = checkSellingPrice(),
      isStatusValid = checkStatus();

    let isFormValid =
      isProductNameValid &&
      isDescriptionValid &&
      isActualPriceValid &&
      isSellingPriceValid &&
      isStatusValid;

    // if (isFormValid) {
    //   form.submit();

    // }
    if (isFormValid) {
      Swal.fire({
        title: 'Are you sure?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, submit it!'
      }).then((result) => {
        if (result.isConfirmed) {
          form.submit();
        }
      })
    }
  });

  form.addEventListener(
    "input",
    debounce(function(e) {
      switch (e.target.id) {
        case "product_name":
          checkProductName();
          break;
        case "description":
          checkDescription();
          break;
        case "actualPrice":
          checkActualPrice();
          break;
        case "sellingPrice":
          checkSellingPrice();
          break;
        case "status":
          checkStatus();
          break;
      }
    })
  );
</script>