<section>
  <div class="container">
    <!-- Breadcrumbs -->
    <ol class="breadcrumb justify-content-center">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/user/profile">My Account</a></li>
      <li class="breadcrumb-item"><a href="/user/orders">Orders</a></li>
      <li class="breadcrumb-item active">Order #<%- orderDetails[0]._id.toString().slice(-7) %></li>
    </ol>
    <!-- Hero Content-->
    <div class="hero-content pb-5 text-center">
      <h1 class="hero-heading h2">
        Order <span class="text-muted">#<%- orderDetails[0]._id.toString().slice(-7) %></span>
      </h1>
      <div class="row">
        <div class="col-xl-8 offset-xl-2">
          <p class="lead text-muted">
            Order #<%- orderDetails[0]._id.toString().slice(-7).toUpperCase()%> was placed on
            <strong><%- orderDetails[0].createdAt.toLocaleDateString() %></strong>
            and is currently
            <strong><span class="badge p-2 text-uppercase <% if (orderDetails[0].status === 'Confirmed') { %> badge-primary-light <% } else if (orderDetails[0].status == 'Shipped') { %> badge-info-light <% } else if (orderDetails[0].status == 'Delivered') { %> badge-success-light <% } else if (orderDetails[0].status == 'Cancelled') { %> badge-danger-light <% } else { %> badge-warning-light <% } %>"><%- orderDetails[0].status %></span> </strong>.
          </p>
          <p class="text-muted">
            If you have any questions, please feel free to
            <a href="/contact">contact us</a>, our customer service center
            is working for you 24/7.
          </p>
        </div>
      </div>
      <div class="d-flex justify-content-center">
        <!-- <div>
    <% if (!['Cancelled', 'Pending', 'Delivered'].includes(orderDetails[0].status)) { %>
    <div class="block-header">
      <h6 class="text-uppercase mb-0">Cancel All Order ??</h6>
    </div>
    <div class="block-body bg-light pt-1">
      <button onclick="cancelAllOrder('<%- orderDetails[0]._id %>')" class="btn btn-danger">
        Cancel All Order
      </button>
    </div>
    <% } %>
  </div> -->
      </div>
    </div>
  </div>
</section>

<!-- Hero Section-->
<section class="hero">
  <div class="container">
    <div class="container mb-5">
      <div class="row">
        <%- include('../partials/user/sidebar.ejs') %>
        <section class="col-lg-8">
          <section class="container pt-1">
            <div class="container row text-capitalize gap-3">
              <% orderDetails.forEach((order) => { %>
              <div class="col-md-12 card mb-3">

                <div class="row align-items-center">

                  <div class="col-md-3">
                    <img id="product_image" data-image="/uploads/product-images/<%- order.products.primary_image.name %>" src="/uploads/product-images/<%- order.products.primary_image.name %>" class="img-fluid rounded-start" alt="<%- order.products.product_name %>">
                  </div>
                  <div class="col-md-7">
                    <div class="card-body">
                      <h5 class="card-title fw-bold text-muted">#<%- order.items.orderID %></h5>
                      <h5 class="card-title h4"><%- order.products.product_name %></h5>
                      <p class="card-text pt-2 d-flex justify-content-evenly lead"><span class="col">Price: $<%- order.items.price %></span><span class="col">Quantity: <%- order.items.quantity %></span></p>
                      <p class="card-text"><small class="text-body-secondary">Color: <%- order.variant.name %><br> Size: <%- order.variant.value %></small></p>
                    </div>
                  </div>

                  <!-- <div class="card-body px-3 m-2 ">
                    <% if (['Delivered', 'In-Return', 'Returned' ].includes(order.items.status) ) { %>
                    <% if (!order.items.review) { %>
                    <div style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#reviewModal" class="btn btn-outline-light d-flex justify-content-around hover" data-product-name="<%- order.products.product_name %>" data-product-id="<%- order.products._id %>" data-variant-color="<%- order.variant.name %>" data-variant-size="<%- order.variant.value %>">
                      <div class="">
                        <i class="bi-solid  text-warning bi-star-fill"></i>
                        <i class="bi-solid text-warning bi-star-fill"></i>
                        <i class="bi-regular text-warning bi-star icon-link-hover"></i>
                        <i class="bi-regular text-warning bi-star"></i>
                        <i class="bi-regular text-warning bi-star"></i>
                        <a class="link text-decoration-none text-primary fw-semibold fs-6">
                          Rate this?
                        </a>
                      </div>
                    </div>
                    <% } %>
                    <% } %>
                  </div> -->
                </div>

                <div class="card-body px-3 m-2 border">
                  <div class="row justify-content-center gap-3 mx-2">
                    <% if (order.items.ordered) { %>
                    <button onclick="cancelOrder('<%- order._id %>','<%- order.items.orderID %>','<%- order.items.variant %>')" type="button" class="btn col btn-outline-danger">Cancel Order</button>
                    <% } %>
                    <!-- <button type="button" class="btn col btn-outline-info">Track Order</button> -->
                    <% if (order.items.return) { %>
                    <button type="button" data-order-id="<%- order._id %>" data-item-id="<%- order.items.orderID %>" data-variant="<%- order.items.variant %>" data-product-id="<%- order.items.product_id._id %>" data-bs-toggle="modal" data-bs-target="#returnOrderModal" class="btn col btn-outline-warning">Return Order</button>
                    <% } %>
                    <% if (order.items.inReturn) { %>
                    <!-- Return Status -->
                    <input role="button" readonly type="none" class="text-center btn bg-secondary text-warning py-2 px-2" value="Return: <%= order.items.status %>">
                    <% } %>
                    <% if (order.items.delivered) { %>
                    <!-- Return Status -->
                    <button id="invoice" data-order-id="<%- order._id %>" data-item-id="<%- order.items.orderID %>" data-variant="<%- order.items.variant %>" data-product-id="<%- order.items.product_id._id %>" data-bs-toggle="modal" data-bs-target="#invoiceModal" type="button" class="btn col btn-outline-primary">Download Invoice</button>
                    <% } %>
                    <!-- <button type="button" class="w-100 btn col btn-outline-success"></button> -->
                  </div>
                </div>

                <% if (order.items.cancelled_on) { %>
                <div class="card-body p-3 m-3 border">
                  <p class="bg-light text-center fw-bold text-danger">Cancelled on <%= order.items.cancelled_on %></p>
                </div>
                <% } %>
                <% if (order.items.returned_on) { %>
                <div class="card-body p-3 m-3 border">
                  <p class="bg-light text-center fw-bold text-danger">Returned on <%= order.items.returned_on %></p>
                </div>
                <% } %>

                <% if (order.items.pending) { %>
                <div class="card-body p-3 m-3 border">
                  <p class="bg-light text-center fw-bold text-danger">Payment Failed</p>
                </div>
                <% } %>
                <div class="card-body p-3 m-3 border">
                  <div class="d-flex mb-1 justify-content-center">
                    <div>
                      <p class="text-primary-light mt-1 mb-0 small "><%= order.updatedAt.toLocaleString() %></p>
                    </div>
                    <div>
                      <% if (order.items.shipped) { %>
                      <p class="text-info mt-1 mb-0 small ms-xl-5"><%= order.items.shipped_on %></p>
                      <% } %>
                    </div>
                    <div>
                      <% if (order.items.outdelivery) { %>
                      <p class="text-primary mt-1 mb-0 small ms-xl-5"><%= order.items.out_for_delivery %></p>
                      <% } %>
                    </div>
                    <div>
                      <% if (order.items.delivered) { %>
                      <p class="text-success mt-1 mb-0 small ms-xl-5"><%= order.items.delivered_on %></p>
                      <% } %>
                    </div>
                  </div>
                  <% if (order.items.status !== 'Returned' && order.items.status !== 'In-Return' && order.items.status !== 'Cancelled' && order.items.status !== 'Return Requested') { %>
                  <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar progress-bar-striped bg-success progress-bar-animated" style="width: <%- order.items.track %>%;"></div>
                  </div>
                  <div class="d-flex justify-content-around mb-1">
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Ordered</p>
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Shipped</p>
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Out for delivery</p>
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Delivered</p>
                  </div>
                  <% } %>
                  <% if (['Returned', 'In-Return', 'Return Requested'].includes(order.items.status)) { %>
                  <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="<%= order.items.track %>" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar progress-bar-striped badge-warning progress-bar-animated" style="width: <%- order.items.track %>%;"></div>
                  </div>
                  <div class="d-flex justify-content-between mb-1">
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Return Requested</p>
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">In Return</p>
                    <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Return</p>
                  </div>

                  <% } %>
                </div>

              </div>
              <% }) %>
            </div>
          </section>

        </section>
      </div>
    </div>
  </div>
</section>

<!-- Return Order -->
<div class="modal fade" id="returnOrderModal" tabindex="-1" aria-labelledby="returnOrderLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnOrderLabel">Return Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="card">
          <form id="return_form" class="card-body px-3 py-2 row">

            <div class="col-md-12">
              <input class="form-control" type="hidden" id="order_id" name="order_id">
              <input class="form-control" type="hidden" id="product_id" name="product_id">
              <input class="form-control" type="hidden" id="item_id" name="item_id">
              <input class="form-control" type="hidden" id="variant" name="variant">
            </div>
            <div class="form-group">
              <label for="reason" class="fw-bold">Reason for return</label>
              <select class="col-md-6 form-select" id="reason" name="reason">
                <option value=""></option>
                <option value="wrong-item">Wrong Item Received</option>
                <option value="defective-damaged">Defective or Damaged Product</option>
                <option value="changed-mind">Changed Mind</option>
                <option value="size-fit-issue">Size or Fit Issue</option>
              </select>
              <small></small>
            </div>
            <div class="form-group">
              <label for="comment" class="fw-bold">Comment</label>
              <textarea name="comment" id="comment" class="col-md-8 form-control" rows="4"></textarea>
              <small></small>
            </div>
            <div class="card-footer">
              <input type="submit" class="btn btn-primary" value="Send Return Request">
              <input type="reset" class="btn btn-outline-warning" value="clear">
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Reviews and Rating -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel">
  <div class="modal-dialog">
    <div class="modal-content modal-lg text-capitalize">
      <div class="modal-header">
        <h5 class="modal-title" id="reviewModalLabel">Review and Rating</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body modal-lg">
        <div class="card">
          <form id="review_form" action="/user/add-review" method="POST" class="card-body px-3 py-2 row">

            <div class="row justify-content-around align-items-center">
              <legend class="d-flex flex-column fs-5 col">
                <span class="fw-bold">Product: <span class="text-muted " id="name"></span></span>
                <span class="fw-bold">Color: <span class="text-muted " id="color"></span></span>
                <span class="fw-bold">Size: <span class="text-muted " id="size"></span></span>
              </legend>
              <img class="img-fluid img-thumbnail col" src="" style="width: 12rem; height: 12rem" id="product-img">
            </div>

            <div class="row">
              <input type="text" name="product_id" id="review_product_id" hidden>
              <input type="text" name="color" id="color_variant" hidden>
              <input type="text" name="size" id="size_variant" hidden>
              <div class="col-sm-4">
                <div class="mb-4">
                  <label class="form-label" for="rating">Your rating *</label>
                  <select class="custom-select focus-shadow-0" name="rating" id="rating">
                    <option value="5">
                      &#9733;&#9733;&#9733;&#9733;&#9733; (5/5)
                    </option>
                    <option value="4">
                      &#9733;&#9733;&#9733;&#9733;&#9734; (4/5)
                    </option>
                    <option value="3">
                      &#9733;&#9733;&#9733;&#9734;&#9734; (3/5)
                    </option>
                    <option value="2">
                      &#9733;&#9733;&#9734;&#9734;&#9734; (2/5)
                    </option>
                    <option value="1">
                      &#9733;&#9734;&#9734;&#9734;&#9734; (1/5)
                    </option>
                  </select>
                </div>
              </div>
            </div>
            <div class="mb-4 form-group">
              <label class="form-label" for="review_title">Title </label>
              <input class="form-control" type="text" name="review_title" id="review_title" placeholder="Enter your review title" required="required">
            </div>
            <div class="mb-4">
              <label class="form-label" for="review">Comment </label>
              <textarea class="form-control" rows="4" name="review" id="review" placeholder="Enter your review" required="required"></textarea>
            </div>
            <button class="btn btn-outline-dark" type="submit">
              Post review
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>



<script defer>
  const cancelOrder = async (orderId, itemId, variant) => {
    const confirmed = await Swal.fire({
      title: "Are you sure?",
      text: "You want to cancel this order.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, cancel!",
      cancelButtonText: "No, keep it!",
      reverseButtons: true,
    });

    if (confirmed.isConfirmed) {
      try {
        const response = await fetch(`/user/cancel-order/${orderId}/${itemId}/${variant}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });
        console.log(response);
        const data = await response.json(); // Parse the response as JSON
        console.log(data);
        if (response.ok) {
          Swal.fire({
            title: "Success!",
            text: data.message, // Use the message from the backend
            icon: "success",
            timer: 1500,
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: data.message || "Something went wrong.", // Use the message from the backend if available
            icon: "error",
            timer: 1500,
          });
        }
      } catch (error) {
        console.error(error);
        Swal.fire({
          title: "Error!",
          text: "Something went wrong.",
          icon: "error",
          timer: 1500,
        });
      }
    }
  }

  const cancelAllOrder = async (orderId) => {
    const confirmed = await Swal.fire({
      title: "Are you sure?",
      text: "You want to cancel all of the order.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, cancel!",
      cancelButtonText: "No, keep it!",
      reverseButtons: true,
    });

    if (confirmed.isConfirmed) {
      try {
        const response = await fetch(`/user/cancel-all-order/${orderId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });
        console.log(response);
        const data = await response.json(); // Parse the response as JSON
        console.log(data);
        if (response.ok) {
          Swal.fire({
            title: "Success!",
            text: data.message, // Use the message from the backend
            icon: "success",
            timer: 1500,
          }).then(() => {
            location.assign("/user/orders");
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: data.message || "Something went wrong.", // Use the message from the backend if available
            icon: "error",
            timer: 1500,
          });
        }
      } catch (error) {
        console.error(error);
        Swal.fire({
          title: "Error!",
          text: "Something went wrong.",
          icon: "error",
          timer: 1500,
        });
      }
    }
  }


  const returnOrderModal = document.getElementById('returnOrderModal')



  returnOrderModal.addEventListener('show.bs.modal', async (e) => {
    const returnOrderBtn = e.relatedTarget;

    const orderId = returnOrderBtn.getAttribute('data-order-id')
    const productId = returnOrderBtn.getAttribute('data-product-id')
    const itemId = returnOrderBtn.getAttribute('data-item-id')
    const variantId = returnOrderBtn.getAttribute('data-variant')

    const order_id = document.getElementById('order_id')
    const product_id = document.getElementById('product_id')
    const item_id = document.getElementById('item_id')
    const variant = document.getElementById('variant')


    order_id.value = orderId
    product_id.value = productId
    item_id.value = itemId
    variant.value = variantId
  });

  const return_form = document.getElementById('return_form')
  const checkReason = () => {
    const reasonEl = document.getElementById('reason');
    let valid = false;
    const reason = reasonEl.value.trim();

    if (!isRequired(reason)) {
      showError(reasonEl, "Please select a reason for return.");
    } else {
      showSuccess(reasonEl);
      valid = true;
    }
    return valid;
  };

  const checkComment = () => {
    const commentEl = document.querySelector("#comment");
    let valid = false;
    const comment = commentEl.value.trim();

    if (!isRequired(comment)) {
      showError(commentEl, "Comment cannot be blank.");
    } else {
      showSuccess(commentEl);
      valid = true;
    }
    return valid;
  };

  const isRequired = (value) => (value === "" ? false : true);

  const showError = (input, message) => {
    const formField = input.parentElement;
    formField.classList.remove("success", "is-valid");
    input.classList.remove("success", "is-valid");
    formField.classList.add("error", "is-invalid");
    input.classList.add("error", "is-invalid");
    const error = formField.querySelector("small");
    error.textContent = message;
  };

  const showSuccess = (input) => {
    const formField = input.parentElement;
    formField.classList.remove("error", "is-invalid");
    input.classList.remove("error", "is-invalid");
    formField.classList.add("success", "is-valid");
    input.classList.add("success", "is-valid");
    const error = formField.querySelector("small");
    error.textContent = "";
  };

  console.log(return_form);
  return_form.addEventListener('submit', async (e) => {
    e.preventDefault()

    let isReasonValid = checkReason(),
      isCommentValid = checkComment();

    let isFormValid = isReasonValid && isCommentValid;

    if (isFormValid) {
      const orderId = document.getElementById('order_id').value

      const formData = new FormData(return_form)
      const body = Object.fromEntries(formData)

      console.log(body);

      await fetch('/user/return-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(body)
        }).then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: "Success!",
              text: data.message, // Use the message from the backend
              icon: "success",
              timer: 1500,
            }).then(() => {
              location.assign(`/user/order/${orderId}`)
            });
            // location.assign(`/user/order/${orderId}`)
          }
        })
    }

  })



  const invoice = document.getElementById('invoice')

  invoice.addEventListener('click', async (e) => {
    const orderId = e.currentTarget.getAttribute('data-order-id')
    const itemId = e.currentTarget.getAttribute('data-item-id')
    console.log(orderId, itemId);
    // Show a SweetAlert2 loading message
    Swal.fire({
      icon: 'info',
      title: 'Generating Invoice...',
      allowOutsideClick: false,
      allowEscapeKey: false,
      didOpen: () => {
        Swal.showLoading();
      },
      timer: 1200,
    }).then(() => {
      // Redirect after the alert is dismissed
      location.assign(`/user/invoice/${orderId}/${itemId}/`);
      // Do it similar to sales report
    });
  })


  const reviewModal = document.getElementById('reviewModal')


  reviewModal.addEventListener('show.bs.modal', async (e) => {
    const reviewBtn = e.relatedTarget;

    const product_name = reviewBtn.getAttribute('data-product-name')
    const color = reviewBtn.getAttribute('data-variant-color')
    const size = reviewBtn.getAttribute('data-variant-size')
    const product_id = reviewBtn.getAttribute('data-product-id')

    document.getElementById('name').innerText = product_name
    document.getElementById('color').innerText = color
    document.getElementById('size').innerText = size

    // set hidden input values
    const productId = document.getElementById('review_product_id').value = product_id
    const colorId = document.getElementById('color_variant').value = color
    const sizeId = document.getElementById('size_variant').value = size

    const img = document.getElementById('product-img')
    const product_image = document.getElementById('product_image')
    img.src = product_image.getAttribute('data-image')

  })

  const reviewForm = document.getElementById('reviewForm')

  reviewForm.addEventListener('submit', async (e) => {
    e.preventDefault()

    Swal.fire({
      title: 'Are you sure?',
      text: "Do you want to submit this review?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, submit review!'
    }).then(async () => {
      const formData = new FormData(reviewForm)
      const body = Object.fromEntries(formData)

      console.log(body);

      try {
        const response = await fetch(reviewForm.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(body)
        })

        const data = await response.json()

        if (data.success) {
          Swal.fire({
            title: "Success!",
            text: data.message, // Use the message from the backend
            icon: "success",
            timer: 1500,
          }).then(() => {
            location.reload()
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: data.message, // Use the message from the backend
            icon: "error",
            timer: 1500,
          })
        }

      } catch (error) {
        console.log(error);
        Swal.fire({
          title: "Error!",
          text: error.message, // Use the message from the backend
          icon: "error",
          timer: 1500,
        })
      }

    })

  })
</script>