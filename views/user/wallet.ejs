<section>
  <div class="container">
    <!-- Breadcrumbs -->
    <ol class="breadcrumb justify-content-center">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/user/profile">Account</a></li>
      <li class="breadcrumb-item active">Wallet</li>
    </ol>
    <!-- Hero Content-->
    <div class="hero-content pb-5 text-center">
      <h1 class="hero-heading">Your Wallet</h1>
    </div>
  </div>
</section>

<div class="container mb-5">

  <div class="row">
    <%- include('../partials/user/sidebar.ejs') %>
    <!-- Content  -->
    <section class="col-lg-8">

      <div class="container row justify-content-between">
        <p class="lead bg-success-light fw-semibold text-uppercase p-2">Balance: $<%- userWallet ?  userWallet?.balance : 0 %></p>
        <button type="button" data-bs-toggle="modal" data-bs-target="#addMoneyModal" class="btn btn-outline-success">Add Money +</button>
      </div>

      <div class="table-responsive py-5 text-capitalize">
        <table class="table table-striped table-hover">
          <thead class="bg-dark-light">
            <tr>
              <th scope="col">Date</th>
              <th scope="col">Amount</th>
              <th scope="col">Notes/Message</th>
              <th scope="col">Type</th>
            </tr>
          </thead>
          <tbody>
            <% if (transactions.length !== 0) { %>
              <% transactions.forEach((element) => { %>
                <tr class="align-middle <%- element.type === 'Credit' ? 'bg-success-light' : 'bg-danger-light' %>">
                  <td><%= element.date.toDateString() %></td>
                  <td><%- element.amount %></td>
                  <td><%- element.message %></td>
                  <td><%- element.type %></td>
                </tr>
              <% }) %>

            <% } else { %>
              <tr>
                <td colspan="4" class="text-center">No transactions yet</td>
              </tr>
            <% } %>
          </tbody>

        </table>

    </section>
  </div>
</div>


<!-- Add Money to Wallet Modal -->

<!-- Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addMoneyForm" action="/user/add-to-wallet" method="POST">
          <div class="mb-3 form-group">
            <label for="amount" class="form-label">Amount</label>
            <input type="number" class="form-control" id="amount" name="amount" placeholder="Enter Amount" required>
            <small></small>
          </div>
          <div class="mb-3">
            <label for="note" class="form-label">Note (Optional)</label>
            <textarea class="form-control" id="note" name="note" rows="3"></textarea>
          </div>
          <button type="submit" class="btn btn-primary">Add Money</button>
        </form>
      </div>
    </div>
  </div>
</div>



<script defer>
  const showError = (input, message) => {
    // get the form-field element
    const formField = input.parentElement;
    // add the error class
    formField.classList.remove("success", "is-valid");
    input.classList.remove("success", "is-valid");
    formField.classList.add("error", "is-invalid");
    input.classList.add("error", "is-invalid");

    // show the error message
    const error = formField.querySelector("small");
    error.textContent = message;
  };

  const showSuccess = (input) => {
    // get the form-field element
    const formField = input.parentElement;

    // remove the error class
    formField.classList.remove("error", "is-invalid");
    input.classList.remove("error", "is-invalid");
    formField.classList.add("success", "is-valid");
    input.classList.add("success", "is-valid");

    // hide the error message
    const error = formField.querySelector("small");
    error.textContent = "";
  };

  const checkAmount = () => {
    let value = false
    const amountEl = document.querySelector('#amount')
    const amount = amountEl.value
    if (!amount) {
      showError(amountEl, 'Amount is required');

    } else if (amount <= 0) {
      showError(amountEl, "Amount can't be negative or zero");
    } else {
      showSuccess(amountEl);
      valid = true;
    }

    return valid
  }

  addMoneyForm = document.querySelector('#addMoneyForm')
  addMoneyForm.addEventListener('submit', async (e) => {
    e.preventDefault()
    const amount = document.querySelector('#amount').value
    const note = document.querySelector('#note').value

    let valid = checkAmount()

    if (valid) {
      Swal.fire({
        icon: 'warning',
        title: 'Are you sure?',
        text: 'Do you want to add money to your wallet?',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes'
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            
            const res = await fetch('/user/add-to-wallet', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                amount,
                note
              }) // convert amount to a string
            })

            console.log(res);
            
            const data = await res.json()
            console.log(data);
            if (data.success) {
              razorpayPayment(data.payment,data.user)
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message
              })
            }
          } catch (error) {
            console.log(error);
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: error.message 
            })
          }
        }
      })
    }
  })




  const razorpayPayment = (order,user) => {
    console.log(order);
    let details = structuredClone(order)
    var options = {
      key: "rzp_test_EL8MknNoOtmLva",
      amount: order.amount,
      currency: "INR",
      name: "SoleStride",
      description: "Test Transaction",
      order_id: order.id,
      handler: async function(response) {
        console.log(response, order);
        await verifyPayment(response, order)
      },
      prefill: {
        name: user.username,
        email: user.email,
        contact: user.phone,
      },
      notes: {
        address: "Razorpay Corporate Office",
      },
      theme: {
        color: "#2ade99",
      },
    };

    var rzp1 = new Razorpay(options);
    rzp1.open();
    rzp1.on("payment.failed", function(response) {
      swal.fire("Failed!", response.error.description, "error").then(() => {
        location.assign("/");
      });
    });
  }

  const verifyPayment = async (response, order) => {

    console.log(response, order);
    const res = await fetch("/user/verify-wallet-payment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          response,
          order
        }),
      })
      .then((response) => {
        console.log(response);
        return response.json()
      })
      .then((data) => {
        console.log(data);
        if (data.success) {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: data.message
          }).then(() => {
            location.assign("/user/wallet");
          })
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message
          })
        }
      }).catch((error) => {
        console.log(error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: error.message
        })
      });

    const data = await res.json()

    console.log(data);
    if (data.success) {
      location.assign("/user/wallet");
    }
  };
</script>